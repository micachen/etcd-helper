#!/bin/sh

init() {
    echo "This is sirius deploy shell, welcome!"
    export CURRENT_DIR=$PWD
}

usage() {
    echo "usage: sirius deploy <options>"
    echo "功能说明:"
    echo "  部署镜像到marathon"
    echo "参数说明:"
    echo "  -I  必选参数: image uri。设定docker镜像路径"
    echo "  -e  可选参数: environment。指定环境，例如：play|dev|qa|stage|prod。默认值：dev"
    echo "  -s  可选参数: sandbox。指定沙箱。默认值：base"
    echo "  -r  必选参数: repository url。指定程序项目仓库"
    echo "  -b  可选参数: branch。指定程序分支，默认值：develop"
    echo "  -c  可选参数: cpu。用于设定cpu数量，单位：核心数. 不设置则从配置文件中读取"
    echo "  -m  可选参数: memory。用于设定mem大小，单位：MB. 不设置则从配置文件中读取"
    echo "  -i  可选参数: instance。用于设定instance个数，单位：个. 不设置则从配置文件中读取"
    echo "  -d  可选参数: work dir。当前工作目录"
}

cmd_help() {
    usage
    exit 0
}

#删除工作目录
function remove_work_dir() {
    if [ "$2" = "" ]; then
        echo 删除工作目录: $1
        cd ../ && rm -rf $1
    fi
}

cmd_default() {
    #cmd_help "$@"
    DEFINE_string   image       ''              'docker image uri'          I
    DEFINE_string   environment 'dev'           'environment'               e
    DEFINE_string   sandbox     'base'          'sandbox'                   s
    DEFINE_string   repository  ''              'service repository'        r
    DEFINE_string   branch      'develop'       'branch'                    b
    DEFINE_string   cpu         '0.5'           'cpu core nums, 0.1~8'      c
    DEFINE_string   mem         '1024'          'memory size(MB)'           m
    DEFINE_string   instance    '1'             'instances'                 i
    DEFINE_string   directory   ''              'work directory'            d


    FLAGS "$@" || exit $?
    eval set -- "${FLAGS_ARGV}"

    if [ "${FLAGS_image}" = "" ]; then
        usage
        die "-I 是必选参数."
    fi

    if [ "${FLAGS_repository}" = "" ]; then
        usage
        die "-r 是必选参数."
    fi

    echo 开始发布...
    
    image_uri=${FLAGS_image}
    environment=${FLAGS_environment}
    sandbox=${FLAGS_sandbox}
    service_repository=${FLAGS_repository}
    branch=${FLAGS_branch}

    echo 检查发布参数：
    echo image: $image_uri
    echo environment: $environment
    echo sandbox: $sandbox
    echo service_repository: $service_repository
    echo branch: $branch

    repository_url_array=(${service_repository//\// })
    if [[ $service_repository =~ ^ssh:// ]]; then
        service_dir=${repository_url_array[3]}
    else
        service_dir=${repository_url_array[4]}
    fi

    echo 解析镜像参数...
    image_array=(${image_uri//\// })
    project_key=${image_array[1]}

    service_and_tag=${image_array[2]}
    service_and_tag_array=(${service_and_tag//:/ })

    service_name=${service_and_tag_array[0]}
    image_tag=${service_and_tag_array[1]}

    tag_array=(${image_tag//-/ })
    api_version=${tag_array[0]}
    app_version=${tag_array[1]}
    build_number=${tag_array[2]}

    echo project_key: $project_key
    echo service_name: $service_name
    echo app_version: $app_version
    echo api_version: $api_version
    echo build_number: $build_number

    # marathon app id 前面加上服务名称
    marathon_group_id="/$environment/$sandbox/$project_key/$service_name/$api_version"
    marathon_app_id="$app_version-$build_number"
    echo marathon_group_id: $marathon_group_id
    echo marathon_app_id: $marathon_app_id

    #设置工作目录
    buildDir=${FLAGS_directory}
    currentTime=`date +'%Y%m%d%H%M%S'`
    if [ "${FLAGS_directory}" = "" ]; then
        buildDir=/tmp/sirius-build-$currentTime
        echo 创建工作目录：$buildDir
        mkdir -p $buildDir
    fi
    echo buildDir: $buildDir
    cd $buildDir

    # 下载配置程序代码
    if [ ! -e "sirius-props" ]; then
        echo 下载配置...
        git clone -b develop $SIRIUS_PROPS sirius-props
        if [ "$?" != "0" ]; then
            remove_work_dir "${buildDir}" "${FLAGS_directory}"
            die "下载服务配置失败。"
        fi
    fi

    # 加载全局配置文件
    echo 加载全局配置文件: $buildDir/sirius-props/properties.sh
    source $buildDir/sirius-props/properties.sh

    # 加载环境配置文件
    echo 加载环境配置文件: $buildDir/sirius-props/$environment/properties.sh
    source $buildDir/sirius-props/$environment/properties.sh


    # 资源值处理
    if [ "${FLAGS_cpu}" != "0.5" ]; then
        service_task_cpu=${FLAGS_cpu}
    fi

    if [ "${FLAGS_mem}" != "1024" ]; then
        service_task_mem=${FLAGS_mem}
    fi

    if [ "${FLAGS_instance}" != "1" ]; then
        service_task_num=${FLAGS_instance}
    fi

    echo 资源参数：
    echo service_task_cpu: $service_task_cpu
    echo service_task_mem: $service_task_mem
    echo service_task_num: $service_task_num

    # 生成环境变量
    envs[${#envs[@]}]="ENVIRONMENT=$environment"
    envs[${#envs[@]}]="SANDBOX=$sandbox"
    envs[${#envs[@]}]="SERVICE_NAME=$service_name"
    envs[${#envs[@]}]="APP_VERSION=$app_version"
    envs[${#envs[@]}]="API_VERSION=$api_version"
    envs[${#envs[@]}]="system.config.address=${system_config_address}"

    envs[${#envs[@]}]="SERVICE_ENVS=ENVIRONMENT,SANDBOX,SERVICE_NAME,APP_VERSION,API_VERSION"
    

    # 转换环境变量
    env_string=""
    for i in ${envs[@]}
    do
        keyValues=(`echo $i|sed -e "s% %%" -e "s%=% %"`)
        if [ "$env_string" = "" ]; then
            env_string="\"${keyValues[0]}\":\"${keyValues[1]}\""
        else
            env_string="${env_string},\"${keyValues[0]}\":\"${keyValues[1]}\""
        fi
    done
    env_string="{${env_string}}"

    echo 环境变量参数：
    echo env: $env_string

    cd $buildDir
    if [ ! -e $service_dir ]; then
        git clone -b $branch $service_repository $service_dir

        if [ "$?" != "0" ]; then
            remove_work_dir "${buildDir}" "${FLAGS_directory}"
            die "下载服务源代码失败。"
        fi
    fi
    cd $buildDir/$service_dir

    #检查Dockerfile文件是否存在
    if [ ! -e "Dockerfile" ]; then
        remove_work_dir "${buildDir}" "${FLAGS_directory}"
        die "在项目根目录中读取Dockerfile文件，但是没有找到。"
    fi

    # 生成端口映射
    ports=(`cat Dockerfile | grep EXPOSE | sed 's/EXPOSE//'`)
    port_mappings=""
    if [ -z $ports ]; then
        echo "variable ports is not found!"
    else
        for j in ${ports[@]}
        do
            if [ "$port_mappings" = "" ]; then
                port_mappings="{\"containerPort\":$j,\"servicePort\":0,\"hostPort\":0,\"protocol\":\"tcp\"}"
            else
                port_mappings="${port_mappings},{\"containerPort\":$j,\"servicePort\":0,\"hostPort\":0,\"protocol\":\"tcp\"}"
            fi
        done
        port_mappings="[${port_mappings}]"
    fi
    echo 端口映射参数：
    echo port_mappings: $port_mappings

    if [ ! -e "Dockerfile" ]; then
        remove_work_dir "${buildDir}" "${FLAGS_directory}"
        die "在项目根目录中读取Dockerfile文件，但是没有找到。"
    fi

    # 替换变量
    cd $buildDir && cp -f sirius-props/app_marathon_template.json marathon_create_apps_req.json
    if [ ! -e "marathon_create_apps_req.json" ]; then
        remove_work_dir "${buildDir}" "${FLAGS_directory}"
        die "没有读取到app_marathon_template.json文件。"
    fi

    sed -i "s%{MARATHON_APP_ID}%$marathon_group_id/$marathon_app_id%g" marathon_create_apps_req.json
    sed -i "s/{REGISTRY_NAME}/$service_name/g" marathon_create_apps_req.json
    sed -i "s%{DOCKER_IMAGE}%$image_uri%g" marathon_create_apps_req.json
    sed -i "s/{PORT_MAPPINGS}/$port_mappings/g" marathon_create_apps_req.json
    sed -i "s/{CPUS}/$service_task_cpu/g" marathon_create_apps_req.json
    sed -i "s/{MEM}/$service_task_mem/g" marathon_create_apps_req.json
    sed -i "s/{INSTANCES}/$service_task_num/g" marathon_create_apps_req.json
    sed -i -e "s%{ENVS}%$env_string%g" -e "s%{ENVS}%\&%g" marathon_create_apps_req.json

    #生成marathon接口uri
    marathon_apps_uri=$marathon_url/apps
    marathon_groups_uri=$marathon_url/groups

    echo 从Marathon上删除旧任务：
    echo curl -X DELETE -H "Content-Type: application/json" "${marathon_groups_uri}$marathon_group_id"
    curl -X DELETE -H "Content-Type: application/json" "${marathon_groups_uri}$marathon_group_id"
    echo

    echo 提交新任务到Marathon：
    echo curl -X PUT -H "Content-Type: application/json" "${marathon_apps_uri}$marathon_group_id/$marathon_app_id" -d@marathon_create_apps_req.json
    cat marathon_create_apps_req.json
    echo
    curl -X PUT -H "Content-Type: application/json" "${marathon_apps_uri}$marathon_group_id/$marathon_app_id" -d@marathon_create_apps_req.json
    echo

    remove_work_dir "${buildDir}" "${FLAGS_directory}"

    echo
    echo 发布成功：
    echo 镜像：$image_uri
    echo MarathonAppId：$marathon_group_id/$marathon_app_id
    echo
}

