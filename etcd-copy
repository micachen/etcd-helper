#!/bin/sh


init() {
    echo "This is etcd copy shell, welcome!"
    export CURRENT_DIR=$PWD
}

usage() {
    echo "usage: etcd copy <options>"
    echo "功能说明:"
    echo "  复制目录或者文件"
    echo "参数说明:"
    echo "	-o	必选参数: origin url, 指定其源目录或者文件的url 例如: http://172.18.2.164:2379/v2/keys/dev/yangtao ."
 	echo "	-d	必选参数: dest url, 指定其目标目录或者文件的url 例如: http://172.18.2.165:2379/v2/keys/qa/yangtao ."
}

cmd_help() {
    usage
    exit 0
}

recursion_copy() {
    echo 参数个数: $#
    if [ $# = 2 ]; then
        origin_url=$1
        dest_url=$2

        echo 递归复制数据开始 ...
        key=`curl $origin_url | jq .node.key`
        echo 目录或者文件的相对路径: $key

        origin_root_url=`echo $origin_url | sed -e "s%$key%%g"`
        echo 源目录或者文件的根路径: $origin_root_url
        is_directory=`curl $origin_url | jq .node.dir`
        echo 检测到的该路径是否是目录: $is_directory

        if [ $is_directory = "true" ]; then
            echo 创建目录
            curl $dest_url -XPUT -d dir=true

            echo 分组所有etcd key值
            origin_keys=(`curl $origin_url | jq '.node.nodes[] | .key' | sed -e "s/\"//g"`)
            if [ -z $origin_keys ]; then
                echo "origin_keys ports is not found!"
            else
                for j in ${origin_keys[@]}
                do
                    echo 路径$origin_url下的子目录或者文件$j ...
                    additionalKey=`echo $j | sed -e "s%$key%%g"`
                    recursion_copy "$origin_root_url/$j" "$dest_url/$additionalKey"
                done
            fi

        else
            etcd_key_copy "$origin_url" "$dest_url"
        fi
    fi
}

etcd_key_copy() {
    echo 参数个数: $#
    if [ $# = 2 ]; then
        origin_url=$1
        dest_url=$2

        echo 找到原始值 ...
        origin_value=`curl $origin_url | jq '.[]' | jq '.value' | sed -e "s/\"//g"`

        echo 将原始值设置到目标对象
        curl $dest_url -XPUT -d value="$origin_value"
    fi
}

cmd_default() {
    echo 函数cmd_default执行开始 ...
    DEFINE_string	origin_url	''		'origin url'	o
  	DEFINE_string	dest_url	''		'dest url'		d

    FLAGS "$@" || exit $?
    eval set -- "${FLAGS_ARGV}"

    echo 验证输入参数 -o ...
    if [ "${FLAGS_origin}" = "" ]; then
        usage
        die "错误信息: -o 是必选参数."
    fi

    echo 验证输入参数 -d ...
    if [ "${FLAGS_dest}" = "" ]; then
        usage
        die "错误信息: -d 是必选参数."
    fi

    echo 开始处理 ...
    recursion_copy "$origin_url" "$dest_url"
    	
}